name: Validate Timeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    paths:
      - 'timeline_data/events/*.yaml'
      - 'tools/**/*.py'

jobs:
  validate:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyyaml
    
    - name: Validate timeline dates
      run: |
        python tools/validation/validate_timeline_dates.py
    
    - name: Check for future confirmed events
      run: |
        python -c "
        import yaml, sys
        from datetime import date
        from pathlib import Path
        
        errors = []
        for f in Path('timeline_data/events').glob('*.yaml'):
            with open(f) as file:
                event = yaml.safe_load(file)
                if event.get('status') == 'confirmed':
                    event_date = event.get('date')
                    if isinstance(event_date, str):
                        event_date = date.fromisoformat(event_date)
                    if event_date > date.today():
                        # Allow confirmed status if event has confirmed_date field
                        # (scheduled elections, announced events, etc.)
                        if 'confirmed_date' not in event:
                            errors.append(f'{f.name}: Future date with confirmed status (missing confirmed_date)')
        
        if errors:
            print('‚ùå Validation failed:')
            for error in errors:
                print(f'  - {error}')
            sys.exit(1)
        else:
            print('‚úÖ All events validated successfully')
        "
    
    - name: Check ID/filename consistency
      run: |
        python -c "
        import yaml, sys
        from pathlib import Path
        
        errors = []
        for f in Path('timeline_data/events').glob('*.yaml'):
            with open(f) as file:
                event = yaml.safe_load(file)
                expected_id = f.stem
                if event.get('id') != expected_id:
                    errors.append(f'{f.name}: ID mismatch (expected {expected_id}, got {event.get(\"id\")})')
        
        if errors:
            print('‚ùå ID/filename mismatches found:')
            for error in errors:
                print(f'  - {error}')
            sys.exit(1)
        else:
            print('‚úÖ All IDs match filenames')
        "
    
    - name: Generate validation report
      if: always()
      run: |
        python tools/generation/build_timeline_index.py || echo "Index generation failed"
        echo "üìä Timeline contains $(ls timeline_data/events/*.yaml | wc -l) events"